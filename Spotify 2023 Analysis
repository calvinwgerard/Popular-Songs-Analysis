{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6367938,"sourceType":"datasetVersion","datasetId":3668746}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-04T17:48:16.315637Z","iopub.execute_input":"2024-07-04T17:48:16.316070Z","iopub.status.idle":"2024-07-04T17:48:16.326633Z","shell.execute_reply.started":"2024-07-04T17:48:16.316030Z","shell.execute_reply":"2024-07-04T17:48:16.325499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.328333Z","iopub.execute_input":"2024-07-04T17:48:16.328720Z","iopub.status.idle":"2024-07-04T17:48:16.338275Z","shell.execute_reply.started":"2024-07-04T17:48:16.328681Z","shell.execute_reply":"2024-07-04T17:48:16.337148Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Need dataset in a different encoding\ndf = pd.read_csv('/kaggle/input/top-spotify-songs-2023/spotify-2023.csv', encoding='ISO-8859-1')\n\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.339485Z","iopub.execute_input":"2024-07-04T17:48:16.339814Z","iopub.status.idle":"2024-07-04T17:48:16.372034Z","shell.execute_reply.started":"2024-07-04T17:48:16.339768Z","shell.execute_reply":"2024-07-04T17:48:16.370879Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#check structure of dataset\ndf.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.374946Z","iopub.execute_input":"2024-07-04T17:48:16.375367Z","iopub.status.idle":"2024-07-04T17:48:16.385204Z","shell.execute_reply.started":"2024-07-04T17:48:16.375327Z","shell.execute_reply":"2024-07-04T17:48:16.384193Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.386656Z","iopub.execute_input":"2024-07-04T17:48:16.387107Z","iopub.status.idle":"2024-07-04T17:48:16.395025Z","shell.execute_reply.started":"2024-07-04T17:48:16.387039Z","shell.execute_reply":"2024-07-04T17:48:16.393868Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#checking for null values\ndf.isna().sum","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.396336Z","iopub.execute_input":"2024-07-04T17:48:16.396741Z","iopub.status.idle":"2024-07-04T17:48:16.418737Z","shell.execute_reply.started":"2024-07-04T17:48:16.396701Z","shell.execute_reply":"2024-07-04T17:48:16.417489Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.420263Z","iopub.execute_input":"2024-07-04T17:48:16.421184Z","iopub.status.idle":"2024-07-04T17:48:16.432927Z","shell.execute_reply.started":"2024-07-04T17:48:16.421141Z","shell.execute_reply":"2024-07-04T17:48:16.431891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#get basic stats of the data\n\ndf_stats = df.describe()\n\ndf_stats","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.434353Z","iopub.execute_input":"2024-07-04T17:48:16.434816Z","iopub.status.idle":"2024-07-04T17:48:16.491150Z","shell.execute_reply.started":"2024-07-04T17:48:16.434763Z","shell.execute_reply":"2024-07-04T17:48:16.490122Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Most popular Keys for songs\ntop_keys = df['key'].value_counts().head(5)\ntop_keys","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.492502Z","iopub.execute_input":"2024-07-04T17:48:16.492833Z","iopub.status.idle":"2024-07-04T17:48:16.501296Z","shell.execute_reply.started":"2024-07-04T17:48:16.492779Z","shell.execute_reply":"2024-07-04T17:48:16.500314Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"key = df['key']\nmode= df['mode']\n\nkey_mode = key + mode\ntop_key_mode = key_mode.value_counts().head(5)\ntop_key_mode","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.504626Z","iopub.execute_input":"2024-07-04T17:48:16.505002Z","iopub.status.idle":"2024-07-04T17:48:16.517092Z","shell.execute_reply.started":"2024-07-04T17:48:16.504967Z","shell.execute_reply":"2024-07-04T17:48:16.515997Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"labels = ['C# Major','G Major','D Major','G# Major','C# Minor']\npalette_color = sns.color_palette('BuGn_r')\n\nplt.figure(figsize=(10, 10))\nplt.pie(top_key_mode, labels=labels, colors=palette_color, autopct='%.0f%%')\nplt.title('Top 5 Musical Keys by Number of Songs')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.518229Z","iopub.execute_input":"2024-07-04T17:48:16.518529Z","iopub.status.idle":"2024-07-04T17:48:16.725726Z","shell.execute_reply.started":"2024-07-04T17:48:16.518502Z","shell.execute_reply":"2024-07-04T17:48:16.724631Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Between the top five musical keys and modes represented in the data, there are not hugely significant differences in percentage. We would still advise the client to use one of these five keys, but choosing between them may be a less important detail.","metadata":{}},{"cell_type":"code","source":"# We want to convert all useable streams data to integers before we add it to our chart\ndf['streams'] = pd.to_numeric(df['streams'], errors='coerce')\n\n# Now we analyze the instrumentalness vs speechiness of songs\ninstrumentality = ['instrumentalness_%', 'speechiness_%']\nstream_count = 'streams'\n\nplt.figure(figsize=(15, 5))\nfor idx, feature in enumerate(instrumentality, start=1):\n    plt.subplot(1, 2, idx)\n    sns.scatterplot(x=df[feature], y=df[stream_count], color='green', alpha=0.5)\n    plt.xlabel(feature.replace('_', ' ').title())\n    plt.ylabel('Number of Streams')\n    plt.title(f'{feature.replace(\"_\", \" \").title()} vs. Number of Streams')\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:16.727153Z","iopub.execute_input":"2024-07-04T17:48:16.727457Z","iopub.status.idle":"2024-07-04T17:48:17.355756Z","shell.execute_reply.started":"2024-07-04T17:48:16.727430Z","shell.execute_reply":"2024-07-04T17:48:17.354661Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"As seen in the statistics of the data that we showed earlier, there is an inverse correlation between instrumentalness and streams as well as speechiness and streams. This will play into the answer we present the client later","metadata":{}},{"cell_type":"markdown","source":"Danceabilty, energy, instrumentalness, and speechiness seem to be the most clearly defined of the percentage-based stats we are given, so let's compare them in one graph.","metadata":{}},{"cell_type":"code","source":"#select columns for song qualities\nsong_descriptors = ['danceability_%', 'energy_%', 'instrumentalness_%','speechiness_%']\n\n\n#create scatter plots\nplt.figure(figsize=(14, 6))\nfor feature in song_descriptors:\n    sns.scatterplot(data=df, x=feature, y=stream_count, alpha=0.75, label=feature.replace('_', ' ').title())\n\nplt.xlabel('Song Discriptors')\nplt.ylabel('Stream Count')\nplt.title('Relationship Between Song Discriptors and Stream Count')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:17.357225Z","iopub.execute_input":"2024-07-04T17:48:17.357620Z","iopub.status.idle":"2024-07-04T17:48:17.957438Z","shell.execute_reply.started":"2024-07-04T17:48:17.357579Z","shell.execute_reply":"2024-07-04T17:48:17.956325Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"This graph more clearly shows us that what we are looking for is something high in danceability and energy and low in instrumentalness and speechiness. Next we weill look at the relationship between bpm and streams.","metadata":{}},{"cell_type":"code","source":"bpm = ['bpm']\nplt.figure(figsize=(14, 6))\nsns.histplot(df['bpm'], bins=20, kde=True, color='green')\n\nplt.xlabel('BPM')\nplt.ylabel('Stream Count')\nplt.title('Relationship Between BPM and Stream Count')\nplt.legend()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-04T17:48:17.959206Z","iopub.execute_input":"2024-07-04T17:48:17.960035Z","iopub.status.idle":"2024-07-04T17:48:18.360463Z","shell.execute_reply.started":"2024-07-04T17:48:17.959991Z","shell.execute_reply":"2024-07-04T17:48:18.359368Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"This graph shows us that around 120 BPM is the most represented in the dataset, meaning that that is the target for our client's task.","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"Now we have enough data to advise our client. In order to write a song that will garner a high amount of streams on Spotify, our client should write a song that fulfills the folowing:\n\n1. The song is around 120 BPM\n2. The song is in one of the following keys: 'C# Major','G Major','D Major','G# Major','C# Minor'\n3. The song is written in a way that emphasizes danceability and energy (the client should consider what genre to write in and how their style may affect those factors).\n\nNote: genre data is not available from this dataset, so the client will have to make decisions regarding genre without specific input from us.","metadata":{}}]}